/**
 * Arquivo de configuração dos PWMs
 * 
 */
 
 #include "DSP28x_Project.h"
 #include "F28M35x_EPwm_defines.h"  
 #include "includes/adc_config.h"
 #include "../config.h"




void ConfigAdc1( void )
{
    // Configure ADC
    EALLOW;
    
    Adc1Regs.ADCCTL2.bit.ADCNONOVERLAP = 1;     // Set ADC to non-overlap mode
    
    Adc1Regs.ADCCTL1.bit.INTPULSEPOS   = 1;     // EOC trips after conversion result is latched
    Adc1Regs.INTSEL1N2.bit.INT2E       = 1;     // Enabled ADCINT1
    Adc1Regs.INTSEL1N2.bit.INT2CONT    = 0;     // Disable ADCINT1 Continuous mode
    Adc1Regs.INTSEL1N2.bit.INT2SEL     = 1;     // setup EOC1 to trigger ADCINT1 (a segunda conversao dispara a interrupcao do ADC)
 
    //Para este casa, será utilizada conversao simultanea,
    //Entao quando o segundo canal (impar) for efetivamente convertido
    //Ocorrerá a interrupcao.
    
    Adc1Regs.ADCSAMPLEMODE.bit.SIMULEN0 = 1;
 
    // Select ADC input channels                                              
    Adc1Regs.ADCSOC0CTL.bit.CHSEL      = 0;     // set SOC0 channel select to ADC1A0
                                                //Se for modo simultaneo, o canal ADC1B0 também será convertido
    //Adc1Regs.ADCSOC1CTL.bit.CHSEL      = 2;   // set SOC1 channel select to ADC1A2
    
    // Selecing triggers for SOCs
    AnalogSysctrlRegs.TRIG1SEL.all     = 5;     // Assigning EPWM1SOCA to TRIGGER 5 of analog subsystem
    //AnalogSysctrlRegs.TRIG2SEL.all     = 9;     // Assigning EPWM1SOCB to TRIGGER 6 of analog subsystem
    
    Adc1Regs.ADCSOC0CTL.bit.TRIGSEL    = 5;     // Fonte do trigger = TRIG1SEL
    //Adc1Regs.ADCSOC1CTL.bit.TRIGSEL    = 6;     // Fonte do trigger = TRIG2SEL
    
    // Set S/H window of 7 ADC clock cycles                                            
    Adc1Regs.ADCSOC0CTL.bit.ACQPS      = 6;     // S/H = ACQPS + 1     
   //Adc1Regs.ADCSOC1CTL.bit.ACQPS      = 6;     
   
   Adc1Regs.ADCCTL1.bit.ADCENABLE = 1;
    
    EDIS;
}



